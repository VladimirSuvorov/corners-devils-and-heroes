function(init_submodule_autodetection)
	find_package(Git QUIET)
	if (GIT_FOUND AND EXISTS "${PROJECT_SOURCE_DIR}/.git")
		option(GIT_SUBMODULE "Check submodules during build" ON)
		if (GIT_SUBMODULE)
			message(STATUS "Submodule update")
			execute_process(COMMAND ${GIT_EXECUTABLE} submodule update --init --recursive
							WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
							RESULT_VARIABLE GIT_SUBMOD_RESULT)
			if (NOT GIT_SUBMOD_RESULT EQUAL "0")
				message(FATAL_ERROR "git submodule update --init failed with ${GIT_SUBMOD_RESULT}, please checkout submodules")
			endif()
		endif()
	endif()
endfunction()

function(check_all_submodules submodule_list)
	foreach(submodule_name ${submodule_list})
		if (NOT EXISTS "${PROJECT_SOURCE_DIR}/externals/${submodule_name}/CMakeLists.txt")
			message(FATAL_ERROR "The ${submodule_name} submodules was not downloaded! GIT_SUBMODULE was turned off or failed.")
		endif()		
	endforeach()	
endfunction()

function(recurse_find_files out_files_var directories extensions)
	foreach(directory ${directories})
		foreach(extension ${extensions})
			file(GLOB_RECURSE files_from_directory "${directory}/*.${extension}")
			list(APPEND all_found_file ${files_from_directory})
		endforeach()
	endforeach()
	set(${out_files_var} ${all_found_file} PARENT_SCOPE)
endfunction()
